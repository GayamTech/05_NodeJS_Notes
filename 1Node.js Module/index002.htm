var http = require('http');
var dt = require('./myfirstmodule');

http.createServer(function (req, res) {
  res.writeHead(200, {'Content-Type': 'text/html'});
  res.write("The date and time are currently: " + dt.myDateTime());
  res.end();
}).listen(8080);


<!-- -->
<!-- -->
<!--

Node.js Modules :

-->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- --> 
<!--




What is a Module in Node.js?:


Consider modules to be the same as JavaScript libraries.

A set of functions you want to include in your application.



https://www.w3schools.com/nodejs/ref_modules.asp



-->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!--


Include Modules:


To include a module, use the require() function with the name of the module:

var http = require('http');






The Built-in HTTP Module:


Node.js has a built-in module called HTTP, which allows Node.js to transfer data over the Hyper Text Transfer Protocol (HTTP).

To include the HTTP module, use the require() method:

var http = require('http');



-->
<!-- --> 
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!--



Now your application has access to the HTTP module, and is able to create a server:

http.createServer(function (req, res) {
  res.writeHead(200, {'Content-Type': 'text/html'});
  res.end('Hello World!');
}).listen(8080);


-->
<!-- -->
<!-- --> 
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- --> 
<!--

Create Your Own Modules
You can create your own modules, and easily include them in your applications.

The following example creates a module that returns a date and time object:

Example
Create a module that returns the current date and time:

exports.myDateTime = function () {
  return Date();
};
Use the exports keyword to make properties and methods available outside the module file.

Save the code above in a file called "myfirstmodule.js"

-->
<!-- -->
<!-- -->
<!-- -->
<!--

Use the module "myfirstmodule" in a Node.js file:




Save the code above in a file called "demo_module.js", and initiate the file:

Initiate demo_module.js:

C:\Users\Your Name>node demo_module.js






Notice that we use ./ to locate the module, that means that the module is located in the same folder as the Node.js file.


If you have followed the same steps on your computer, you will see the same result as the example: http://localhost:8080


-->
<!-- -->
<!-- -->
<!-- --> 
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- --> 
